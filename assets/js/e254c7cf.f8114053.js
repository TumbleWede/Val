"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[560],{7108:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Intro","href":"/Val/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Observers","href":"/Val/docs/observers","docId":"observers","unlisted":false},{"type":"link","label":"Computeds","href":"/Val/docs/computeds","docId":"computeds","unlisted":false},{"type":"link","label":"Operator Methods","href":"/Val/docs/operations","docId":"operations","unlisted":false},{"type":"link","label":"Scopes","href":"/Val/docs/scopes","docId":"scopes","unlisted":false},{"type":"link","label":"Destroying States","href":"/Val/docs/destroy","docId":"destroy","unlisted":false},{"type":"link","label":"Cloning States","href":"/Val/docs/cloning","docId":"cloning","unlisted":false},{"type":"link","label":"Batching","href":"/Val/docs/batching","docId":"batching","unlisted":false}]},"docs":{"batching":{"id":"batching","title":"Batching","description":"Val supports batching, where we can set multiple states in a batch that will only call observers after all the values have been set.","sidebar":"defaultSidebar"},"cloning":{"id":"cloning","title":"Cloning States","description":"Use Val","sidebar":"defaultSidebar"},"computeds":{"id":"computeds","title":"Computeds","description":"This library supports computed states, which are essentially states whose values are derived from dependent states. When a dependent state changes, the computed state will automatically update along with it. This means that you cannot change the value of a computed state manually.","sidebar":"defaultSidebar"},"destroy":{"id":"destroy","title":"Destroying States","description":"To destroy a state, simply use Valisdead() or Val.isdead(Val) (all methods can be called as static such as Val.set(Val, T)):","sidebar":"defaultSidebar"},"intro":{"id":"intro","title":"Intro","description":"In this page, I will introduce the basics of Val, but the principles can be applied to most state libraries.","sidebar":"defaultSidebar"},"observers":{"id":"observers","title":"Observers","description":"Observers are event listeners that are called whenever the state changes its value:","sidebar":"defaultSidebar"},"operations":{"id":"operations","title":"Operator Methods","description":"Val has many operator methods that help reduce the code needed to perform operations on Val object.","sidebar":"defaultSidebar"},"scopes":{"id":"scopes","title":"Scopes","description":"In Val, scopes are Val objects with no value with the intention of storing other values.","sidebar":"defaultSidebar"}}}}')}}]);
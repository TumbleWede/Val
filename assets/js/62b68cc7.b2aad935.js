"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58],{3261:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"observers","title":"Observers","description":"Observers are event listeners that are called whenever the state changes its value:","source":"@site/docs/observers.md","sourceDirName":".","slug":"/observers","permalink":"/Val/docs/observers","draft":false,"unlisted":false,"editUrl":"https://github.com/TumbleWede/Val/edit/main/docs/observers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Intro","permalink":"/Val/docs/intro"},"next":{"title":"Computeds","permalink":"/Val/docs/computeds"}}');var l=t(4848),a=t(8453);const r={sidebar_position:2},o="Observers",c={},d=[];function i(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"observers",children:"Observers"})}),"\n",(0,l.jsx)(n.h1,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.p,{children:"Observers are event listeners that are called whenever the state changes its value:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local x = Val.new(2)\r\nlocal disconnect = x:on(function(newValue, oldValue, wasCalledImmediately)\r\n\tprint(newValue, oldValue, wasCalledImmediately)\r\nend, true) -- 2 2 true\r\nx:set(4) -- 4 2 false\r\nx:set(8) -- 8 4 false\r\nx:set(8) -- no output because value did not change\r\nx:set(8, true) -- 8 8 false\r\ndisconnect()\r\nx:set(16) -- no output\n"})}),"\n",(0,l.jsxs)(n.p,{children:["We created an observer by calling the ",(0,l.jsx)(n.code,{children:"Val:on"})," method, which takes in a callback function and an optional boolean."]}),"\n",(0,l.jsx)(n.p,{children:"The callback function takes in three optional values:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"newValue"})," - the state's newly updated value"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"oldValue"})," - the state's previous value"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"wasCalledImmediately"})," - if the callback was called immediately"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["In most cases, you will only need ",(0,l.jsx)(n.code,{children:"newValue"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["The second optional parameter, if set to ",(0,l.jsx)(n.code,{children:"true"}),", indicates that we want to call the observer immediately. If ",(0,l.jsx)(n.code,{children:"false"})," or ",(0,l.jsx)(n.code,{children:"nil"}),", the observer will not be called until the next state update."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Val:on"})," method returns a disconnect callback. When we no longer need to listen to a value, we can call this disconnect. In the example above, our observer would display any changes of the value of ",(0,l.jsx)(n.code,{children:"x"}),", but this observer is destroyed after we called ",(0,l.jsx)(n.code,{children:"disconnect()"})]}),"\n",(0,l.jsxs)(n.p,{children:["In the example above, we used ",(0,l.jsx)(n.code,{children:"Val:set"})," with a second optional boolean parameter that, when ",(0,l.jsx)(n.code,{children:"true"}),", would cause the method to call its observers even if the value did not actually change."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(i,{...e})}):i(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const l={},a=s.createContext(l);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);
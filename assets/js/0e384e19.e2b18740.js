"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{7879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"intro","title":"Intro","description":"In this page, I will introduce the basics of Val, but the principles can be applied to most state libraries.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/Val/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/TumbleWede/Val/edit/main/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"Observers","permalink":"/Val/docs/observers"}}');var a=t(4848),r=t(8453);const i={sidebar_position:1},l="Intro",o={},c=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"intro",children:"Intro"})}),"\n",(0,a.jsx)(n.p,{children:"In this page, I will introduce the basics of Val, but the principles can be applied to most state libraries."}),"\n",(0,a.jsx)(n.p,{children:"Let's begin by creating some simple logic:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local num = 20\r\nnum = 40\r\nprint(num) -- 40\n"})}),"\n",(0,a.jsx)(n.p,{children:"In the example above, all we did was create a number, modify it, and print its value."}),"\n",(0,a.jsx)(n.p,{children:"Now let's do the same thing using Val:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local num = Val.new(20)\r\nnum:set(40)\r\nprint(num:get()) -- 40\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This time, ",(0,a.jsx)(n.code,{children:"num"})," is a state object and not a primitive. To set the value, we simply use the ",(0,a.jsx)(n.code,{children:"set"})," method. To get the value, we just use ",(0,a.jsx)(n.code,{children:"get"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Now, let's try a more legitimate example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local label = script.Parent.TextLabel -- assume this exists\r\nlocal num = 20\r\nlabel.Text = "Number: " .. num -- Number: 20\r\nnum = 40\r\nlabel.Text = "Number: " .. num -- Number: 40\r\nnum = 70\r\nlabel.Text = "Number: " .. num -- Number: 70\n'})}),"\n",(0,a.jsxs)(n.p,{children:["One issue with this logic is that we have to manually update ",(0,a.jsx)(n.code,{children:"label.Text"})," every time we change ",(0,a.jsx)(n.code,{children:"num"})," because it is a primitive that cannot be observed."]}),"\n",(0,a.jsx)(n.p,{children:"Now let's try the same thing with Val:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local label = script.Parent.TextLabel -- assume this exists\r\nlocal num = Val.new(20)\r\nnum:on(function(value)\r\n\tlabel.Text = "Number: " .. num\r\nend, true) -- Number: 20\r\nnum:set(40) -- Number: 40\r\nnum:set(70) -- Number: 70\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now, all we have to do is change the value of ",(0,a.jsx)(n.code,{children:"num"}),", and ",(0,a.jsx)(n.code,{children:"label.Text"})," will automatically update through the ",(0,a.jsx)(n.code,{children:"on"})," method."]}),"\n",(0,a.jsx)(n.p,{children:"Although code this small may not demand the use of a state container library like Val, synchronizing values with displays in large codebases can quickly become messy. Luckily, state container libraries like Val make this synchronization much more manageable."}),"\n",(0,a.jsx)(n.p,{children:"In the next pages, I will talk more about how to use the features of Val."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
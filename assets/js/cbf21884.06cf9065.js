"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[383],{5494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"batching","title":"Batching","description":"Val supports batching, where we can set multiple states in a batch that will only call observers after all the values have been set.","source":"@site/docs/batching.md","sourceDirName":".","slug":"/batching","permalink":"/Val/docs/batching","draft":false,"unlisted":false,"editUrl":"https://github.com/TumbleWede/Val/edit/main/docs/batching.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"defaultSidebar","previous":{"title":"Cloning States","permalink":"/Val/docs/cloning"}}');var s=n(4848),o=n(8453);const i={sidebar_position:8},l="Batching",c={},r=[];function h(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"batching",children:"Batching"})}),"\n",(0,s.jsx)(t.p,{children:"Val supports batching, where we can set multiple states in a batch that will only call observers after all the values have been set."}),"\n",(0,s.jsx)(t.p,{children:"Let's look at a basic example of setting a state without batching:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local x = Val.new(2)\nx:on(function(value)\n\tprint("x set to", value)\nend)\nx:set(3) -- x set to 3\nx:set(4) -- x set to 4\nx:set(5) -- x set to 5\n'})}),"\n",(0,s.jsx)(t.p,{children:"In this case, the observer will be called after each set. Now let's do the same thing but with batching:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local x = Val.new(2)\nx:on(function(value)\n\tprint("x set to", value)\nend)\n\nVal.batch(function(set)\n\tset(x, 3) -- no output\n\tset(x, 4) -- no output\n\tset(x, 5) -- no output\nend) -- x set to 5\n'})}),"\n",(0,s.jsx)(t.p,{children:"This time, setting the value of x will not call the observer until after the batch is done. This means that the observer will only be called once instead of three times."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Val.batch"})," function took in a callback function as the argument, which took in a set function. The ",(0,s.jsx)(t.code,{children:"set(Val<T>, T)"})," function allows us to set the value of the state without immediately calling the observer. If ",(0,s.jsx)(t.code,{children:"Val:set"})," were to be used inside the batch callback, then the observer would immediately be called."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["You cannot use any of the assignment operator methods inside the batch, as just like ",(0,s.jsx)(t.code,{children:"Val:set"}),", they would immediately call the observer inside the batch. You would have to set the value manually, so ",(0,s.jsx)(t.code,{children:"a:add(b)"})," would look like ",(0,s.jsx)(t.code,{children:"set(a, a:get() + b)"})]}),"\n",(0,s.jsx)(t.li,{children:"Computeds cannot be batched because of their reliance on observers. As mentioned previously about redundant updates when chaining computeds, there is not a way to solve it with batching in Val."}),"\n"]})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(6540);const s={},o=a.createContext(s);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81],{8434:(e,d,s)=>{s.r(d),s.d(d,{assets:()=>l,contentTitle:()=>i,default:()=>o,frontMatter:()=>c,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"operations","title":"Operator Methods","description":"Val has many operator methods that help reduce the code needed to perform operations on Val object.","source":"@site/docs/operations.md","sourceDirName":".","slug":"/operations","permalink":"/Val/docs/operations","draft":false,"unlisted":false,"editUrl":"https://github.com/TumbleWede/Val/edit/main/docs/operations.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"Computeds","permalink":"/Val/docs/computeds"},"next":{"title":"Scopes","permalink":"/Val/docs/scopes"}}');var n=s(4848),r=s(8453);const c={sidebar_position:4},i="Operator Methods",l={},h=[];function a(e){const d={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(d.header,{children:(0,n.jsx)(d.h1,{id:"operator-methods",children:"Operator Methods"})}),"\n",(0,n.jsx)(d.p,{children:"Val has many operator methods that help reduce the code needed to perform operations on Val object."}),"\n",(0,n.jsx)(d.p,{children:"Using these operator methods also reduces the number of calls per operation, thus being more efficient than performing them manually (as seen in the Val equivalents)."}),"\n",(0,n.jsx)(d.p,{children:"These methods will not check if the operation is valid, so trying to do something devious like dividing a string will result in an error."}),"\n",(0,n.jsx)(d.h1,{id:"assignment-operators",children:"Assignment Operators"}),"\n",(0,n.jsxs)(d.p,{children:["Assume ",(0,n.jsx)(d.code,{children:"a"})," is a ",(0,n.jsx)(d.code,{children:"Val<T>"})," and ",(0,n.jsx)(d.code,{children:"b"})," is a ",(0,n.jsx)(d.code,{children:"T"}),", where ",(0,n.jsx)(d.code,{children:"T"})," is any type. If ",(0,n.jsx)(d.code,{children:"b"})," were to be a ",(0,n.jsx)(d.code,{children:"Val<T>"}),", then you would need to call ",(0,n.jsx)(d.code,{children:"b:get()"})," inside each assignment call (e.g. ",(0,n.jsx)(d.code,{children:"a:add(b:get())"}),")."]}),"\n",(0,n.jsxs)(d.table,{children:[(0,n.jsx)(d.thead,{children:(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.th,{children:"Name"}),(0,n.jsx)(d.th,{children:"Operator"}),(0,n.jsx)(d.th,{children:"Val Method"}),(0,n.jsx)(d.th,{children:"Val Equivalent"})]})}),(0,n.jsxs)(d.tbody,{children:[(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Addition"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a += b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:add(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() + b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Subtraction"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a -= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:sub(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() - b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Multiplication"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a *= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:mul(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() * b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Division"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a /= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:div(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() / b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Floor Division"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a //= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:idiv(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() // b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Modulus"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a %= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:mod(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() % b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Exponentiation"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a ^= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:pow(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() ^ b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Concatenation"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a ..= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:cat(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(a:get() .. b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Toggling"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = not a"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:flip()"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(not a:get())"})})]})]})]}),"\n",(0,n.jsx)(d.p,{children:"Additionally, you can also chain these methods together:"}),"\n",(0,n.jsx)(d.pre,{children:(0,n.jsx)(d.code,{className:"language-lua",children:"local x = Val.new(2)\nx:pow(3):div(4):add(5):mul(6) -- (((x ^ 3) / 4) + 5) * 6\nprint(x:get()) -- 42\n"})}),"\n",(0,n.jsx)(d.h1,{id:"math-operations",children:"Math Operations"}),"\n",(0,n.jsx)(d.p,{children:"These methods behave the same as assignment operators."}),"\n",(0,n.jsxs)(d.table,{children:[(0,n.jsx)(d.thead,{children:(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.th,{children:"Name"}),(0,n.jsx)(d.th,{children:"Operation"}),(0,n.jsx)(d.th,{children:"Val Method"}),(0,n.jsx)(d.th,{children:"Val Equivalent"})]})}),(0,n.jsxs)(d.tbody,{children:[(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Min Value"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.min(a, b, ...)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:min(b, ...)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.min(a:get(), b, ...))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Max Value"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.max(a, b, ...)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:max(b, ...)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.max(a:get(), b, ...))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Clamp"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.clamp(a, min, max)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:clamp(min, max)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.clamp(a:get(), min, max))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Absolute Value"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.abs(a)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:abs()"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.abs(a:get()))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Floor"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.floor(a)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:floor()"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.floor(a:get()))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Ceiling"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.ceil(a)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:ceil()"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.ceil(a:get()))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Round"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.round(a)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:round()"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.round(a:get()))"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Snap"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.round(a / b) * b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:snap(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.round(a:get() / b) * b)"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Lerp"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a = math.lerp(a, b, t)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:lerp(b, t)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:set(math.lerp(a:get(), b, t))"})})]})]})]}),"\n",(0,n.jsx)(d.h1,{id:"relational-operators",children:"Relational Operators"}),"\n",(0,n.jsxs)(d.p,{children:["Assume both ",(0,n.jsx)(d.code,{children:"a"})," and ",(0,n.jsx)(d.code,{children:"b"})," are a ",(0,n.jsx)(d.code,{children:"Val<T>"}),", since these methods are meant to be used exclusively for comparing ",(0,n.jsx)(d.code,{children:"Val"})," objects."]}),"\n",(0,n.jsxs)(d.table,{children:[(0,n.jsx)(d.thead,{children:(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.th,{children:"Name"}),(0,n.jsx)(d.th,{children:"Operator"}),(0,n.jsx)(d.th,{children:"Val Method"}),(0,n.jsx)(d.th,{children:"Val Equivalent"})]})}),(0,n.jsxs)(d.tbody,{children:[(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Equal to"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a == b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:eq(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:get() == b:get()"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Less than"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a < b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:lt(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:get() < b:get()"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Less than or equal to"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a <= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:le(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:get() <= b:get()"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Greater than"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a > b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:gt(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:get() > b:get()"})})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:"Greater than or equal to"}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a >= b"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:ge(b)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"a:get() >= b:get()"})})]})]})]})]})}function o(e={}){const{wrapper:d}={...(0,r.R)(),...e.components};return d?(0,n.jsx)(d,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,d,s)=>{s.d(d,{R:()=>c,x:()=>i});var t=s(6540);const n={},r=t.createContext(n);function c(e){const d=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function i(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(r.Provider,{value:d},e.children)}}}]);